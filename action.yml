---
name: "Prepare an archive tarball"
description: "Be aware that the only responsibility of this repository is validation and archive tarball preparation."
icon: "archive"
color: "black"

runs:
  using: "composite"
  steps:
    - name: "Validate PackageInfo.g"
      shell: bash
      run: |
        set -e
        gap -A -q -c 'QuitGap(ValidatePackageInfo("PackageInfo.g"));'

    - name: "Generate package-info.json"
      shell: bash
      run: |
        set -e
        gap -A -q ${{ github.action_path }}/pkginfo_to_json.g
        # TODO: Throw error if file was not made

    - name: "Read data from package-info.json"
      shell: bash
      run: |
        set -e
        # Get necessary info from package-info.json

        TMP=($(cat package-info.json | jq -r '.ArchiveURL' | tr "/" " "))
        if [ "${#TMP[@]}" -eq 8 ] &&
           [ "${TMP[0]}" = "https:" ] &&
           [ "${TMP[1]}" = "github.com" ] &&
           [ "${TMP[4]}" = "releases" ] &&
           [ "${TMP[5]}" = "download" ]; then
            echo "TAG=${TMP[6]}" >> "$GITHUB_ENV"
            echo "BASENAME=${TMP[7]}" >> "$GITHUB_ENV"
        else
            # TODO: Should probably throw error here
            echo "Problem with ArchiveURL"
        fi
        echo "PKG=$(cat package-info.json | jq -r '.PackageName')" >> "$GITHUB_ENV"
        echo "VERSION=$(cat package-info.json | jq -r '.Version')" >> "$GITHUB_ENV"
        echo "DATE=$(cat package-info.json | jq -r '.Date')" >> "$GITHUB_ENV"
        echo "ARCHIVE_FORMATS=$(cat package-info.json | jq -r '.ArchiveFormats' | tr "," " ")" >> "$GITHUB_ENV"
        echo "DOCS=$(cat package-info.json | jq -r '.PackageDoc[].PDFFile' | tr "\n" " ")" >> "$GITHUB_ENV"
        echo "ASSETS=package-info.json" >> "$GITHUB_ENV"

    - name: "Cleanup before making a tarball"
      shell: bash
      run: |
         set -e
         echo "::group:: Cleanup git and github related files"
         rm -rvf .git* .hg* .cvs* .circleci
         rm -fv .codecov.* .travis.* .appveyor.* azure-pipelines.*
         rm -fv .gaplint.*
         rm -fv requirements.txt

         echo "::group:: Cleanup macOS metadata"
         find . -name .DS_Store -exec rm -f {} +

         echo "::group:: Cleanup LaTeX auxiliary files"
         find doc \( -name '*.aux' -o -name '*.bbl' -o -name '*.blg' -o -name '*.brf' -o -name '*.idx' -o -name '*.ilg' -o -name '*.ind' -o -name '*.log' -o -name '*.out' -o -name '*.pnr' -o -name '*.toc' -o -name '*.tst' \) -exec rm -f {} +

    - name: Create archives 
      shell: bash
      run: |
        set -e
        # Move necessary files to subfolder
        shopt -s extglob
        mkdir -p "$BASENAME"
        mv !($BASENAME|package-info.json) $BASENAME
        
        # Make archives
        for EXT in $ARCHIVE_FORMATS ; do
            ARCHIVENAME=$BASENAME$EXT
            FULLNAME="$PWD/$ARCHIVENAME"
            echo "Creating $ARCHIVENAME ..."
            case $EXT in
            .tar.gz)  tar cf - "$BASENAME" | gzip -9c > "$ARCHIVENAME" ;;
            .tar.bz2) tar cf - "$BASENAME" | bzip2 -9c > "$ARCHIVENAME" ;;
            .zip)     zip -r9 --quiet "$ARCHIVENAME" "$BASENAME" ;;
            *)
                # TODO: Should probably throw error here
                echo "unsupported archive format $EXT"
                continue
                ;;
            esac
            if [ ! -f "$FULLNAME" ] ; then
                # TODO: Should probably throw error here
                echo "failed creating $FULLNAME"
            fi
        done

    - name: "Make copy of manual(s)"
      shell: bash
      run: |
        set -e
        for DOC in $DOCS ; do
            cp $BASENAME/$DOC $(basename $DOC)
            ASSETS="$ASSETS,$(basename $DOC)"
        done
        echo "ASSETS=$ASSETS" >> "$GITHUB_ENV"

    - name: Make release
      uses: softprops/action-gh-release@v2
      with:
        body: "Release for ${{ env.PKG }}"
        name: "${{ env.PKG }} ${{ env.VERSION }}"
        draft: false
        prerelease: false
        fail_on_unmatched_files: true
        tag_name: "${{ env.TAG }}"
        files: "${{ env.ASSETS }}"
