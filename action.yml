---
name: "Prepare an archive tarball"
description: "Be aware that the only responsibility of this repository is validation and archive tarball preparation."
icon: "archive"
color: "black"

runs:
  using: "composite"
  steps:
    - name: "Validate PackageInfo.g"
      shell: bash
      run: |
        gap -A -q -c 'QuitGap(ValidatePackageInfo("PackageInfo.g"));'

    - name: "Generate package-info.json"
      shell: bash
      run: |
        gap -A -q ${{ github.action_path }}/pkginfo_to_json.g

    - name: Cleanup before making a tarball
      shell: bash
      run: |
         echo "::group:: Cleanup git and github related files"
         rm -rvf .git* .hg* .cvs* .circleci
         rm -fv .codecov.* .travis.* .appveyor.* azure-pipelines.*
         rm -fv .gaplint.*
         rm -fv requirements.txt

         echo "::group:: Cleanup macOS metadata"
         find . -name .DS_Store -exec rm -f {} +

         echo "::group:: Cleanup LaTeX auxiliary files"
         find doc \( -name '*.aux' -o -name '*.bbl' -o -name '*.blg' -o -name '*.brf' -o -name '*.idx' -o -name '*.ilg' -o -name '*.ind' -o -name '*.log' -o -name '*.out' -o -name '*.pnr' -o -name '*.toc' -o -name '*.tst' \) -exec rm -f {} +

    - name: Create archives 
      shell: bash
      run: |
        # Install jq to parse json (usually already on the github runner)
        sudo apt-get update
        sudo apt-get install jq
        
        # Get necessary info from package-info.json
        URL=$(cat package-info.json | jq -r '.ArchiveURL')
        DOCLOC=$(cat package-info.json | jq -r '.PackageDoc[].PDFFile')
        BASENAME=$(basename $URL)
        DOC=$(basename $DOCLOC)
        ARCHIVE_FORMATS=$(cat package-info.json | jq -r '.ArchiveFormats' | tr "," " ")
        
        # Move necessary files to subfolder
        shopt -s extglob
        mkdir -p "$BASENAME"
        mv !($BASENAME|package-info.json) $BASENAME

        # Copy manual back to main folder
        cp $BASENAME/doc/$DOC $DOC
        
        # Make archives
        for EXT in $ARCHIVE_FORMATS ; do
            ARCHIVENAME=$BASENAME$EXT
            FULLNAME="$PWD/$ARCHIVENAME"
            echo "Creating $ARCHIVENAME ..."
            case $EXT in
            .tar.gz)  tar cf - "$BASENAME" | gzip -9c > "$ARCHIVENAME" ;;
            .tar.bz2) tar cf - "$BASENAME" | bzip2 -9c > "$ARCHIVENAME" ;;
            .zip)     zip -r9 --quiet "$ARCHIVENAME" "$BASENAME" ;;
            *)
                echo "unsupported archive format $EXT"
                continue
                ;;
            esac
            if [ ! -f "$FULLNAME" ] ; then
                echo "failed creating $FULLNAME"
            fi
        done

    - name: GitHub - Upload artifacts
      uses: softprops/action-gh-release@v2
      if: startsWith(github.ref, 'refs/tags/')
      with:
        files: |
          PackageInfo.json
          manual.pdf
