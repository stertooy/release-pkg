---
name: CI
on:
  pull_request:
  push:
  workflow_dispatch:

jobs:
  test-action:
    name: "Test the pkg-release action"
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - package: "gap-actions/ActionTestGAPDocPackage"
            force: true
          - package: "gap-actions/ActionTestOldDocPackage"
            force: false
    
    steps:
      # the order of the checkout actions is important because all contents of
      # the target folder of the checkout action is removed
      - name: "Clone the package"
        uses: actions/checkout@v5
        with:
          repository: ${{ matrix.package }}

      - name: "Fake the package's date so it does not get rejected later on"
        shell: bash
        if: ${{ !matrix.force }}
        run: |
          DATE=$(date +%d/%m/%Y)
          sed -i -E "s|(Date[[:space:]]*:?=[[:space:]]*['\"]).*(['\"])|\1${DATE}\2|" "PackageInfo.g"

      - name: "Check out this repository"
        uses: actions/checkout@v5
        with:
          path: .this-action/

      - name: "Setup GAP + json package"
        uses: gap-actions/setup-gap@v2
        with:
          GAP_PKGS_TO_BUILD: json
          
      - name: "Build manual"
        uses: gap-actions/build-pkg-docs@v1
        with:
          use-latex: true

      - name: "Make a release"
        uses: ./.this-action/
        with:
          dry-run: true
          force: ${{ matrix.force }}

  test-scripts:
    name: "Test the scripts used by this action"
    runs-on: ubuntu-latest

    steps:

      - name: "Check out this repository"
        uses: actions/checkout@v5

      - name: "Setup for testing check_filenames.sh"
        shell: bash
        run: |
          mkdir -p filename-dir-1
          cd filename-dir-1
          mkdir -p doc
          echo "0" > :q
          echo "1" > "\Users\GillBates"
          echo "2" > AUX
          echo "3" > COM².tar.gz
          echo "4" > "period."
          echo "5" > "space "
          echo "6" > DOC
          cd ../
          mkdir -p filename-dir-2
          cd filename-dir-2
          mkdir -p doc
          echo "0" > PackageInfo.g
          echo "1" > doc/manual.pdf
          echo "2" > manual.pdf
          echo "3" > README
          echo "4" > readme.txt
          echo "5" > auxiliary
          echo "6" > .gaplint.yml

      - name: "Test bad filenames"
        id: bad-names
        shell: bash
        working-directory: filename-dir-1
        continue-on-error: true
        run: ../check_filenames.sh > $RUNNER_TEMP/filenames_run.txt

      - name: "Verify"
        shell: bash
        working-directory: filename-dir-1
        run: |
          cat <<EOF > $RUNNER_TEMP/filenames_chk.txt
          Checking for Windows-incompatible names
            Name ends with space or period: period.
            Reserved Windows name: COM².tar.gz
            Name ends with space or period: space 
            Duplicate filename: DOC and doc
            Reserved Windows name: AUX
            Illegal character in name: \Users\GillBates
            Illegal character in name: :q
          EOF
          diff $RUNNER_TEMP/filenames_run.txt $RUNNER_TEMP/filenames_chk.txt

      - name: "Test good filenames"
        shell: bash
        working-directory: filename-dir-2
        run: ../check_filenames.sh
